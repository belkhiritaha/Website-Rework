{
    "websites": [
        {
            "title": "Fact Checker",
            "layout": [
                0,
                1,
                0,
                2,
                0,
                1,
                0,
                2,
                0,
                0,
                2,
                1,
                0,
                2,
                1,
                0,
                2,
                0,
                3,
                0
            ],
            "content": [
                "A program that checks if an information is fake or not",
                "CONCEPT",
                "Given a statement that illustrates a relationship between two entities, the program checks if the statement is true or false. It does so by building a knowledge graph, and looking for the shortest path between the two entities. A rather long path corresponds to a false statement, while a short path corresponds to a true statement.",
                "../img/Figure-2-example-of-a-knowledge-graph.png",
                "On the example we can see that Barack Obama is directly linked to Michelle Obama, therefore, any statement directly linking those two entities is likely to be true.",
                "ALGORITHM",
                "We start with the statement's first entity as the first node to our graph. We then make SQL queries from the Wikidata database to get all the entities that are linked to our first entity. We have now built a fist layer of entities that surrounds our first node.",
                "../img/1stlayer.png",
                "We reiterate this process for the stqtement's second entity, and we get a second layer of entities surrounding our second node. We reiterate this process for all the nodes on the first layer of entities, second layer, third... until the two separate graphs we're building connect. This process is not garanteed to terminate, so we must set a limit on the number of iterations upon which, we can say that the statement is likely to be false, since there is no obvious link between the two entities.",
                "The resulting knowledge graph looks like this:",
                "../img/kg.png",
                "SHORTEST PATH",
                "In this graph, we look for the shortest path that connects the two entities. And given the weight of each edge, we can calculate the Truth Value of the statement.",
                "../img/pathexmpl.png",
                "TRUTH VALUE",
                "The Truth Value of a statement is defined as such:",
                "../img/truthvalue.png",
                "Where K is a calibration function, and N is the paths length (sum of nodes weights)",
                ["../img/25231.png", "github.com/belkhiritaha/Fact-checker"],
                "(Source code)"
            ]
        },
        {
            "title": "LoL Imposters",
            "layout": [
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                3,
                0
            ],
            "content": [
                "A fun discord bot to spice up your LoL games",
                "CONCEPT",
                "The bot is designed to be used in a discord server, and it's main purpose is to spice up your LoL games. It does so by generating random events that can happen during a game, and it's up to the players to decide what to do with it.",
                "HOW TO PLAY",
                "First, you need to invite the bot on your server, and then you can start a game by typing !start. The bot will pick 2 players at random from your channel to be imposters, and will then send through DMs random missions for the Imposters to execute throughout the game.",
                "COOL FEATURE",
                "I found debugging the code a bit frustrating as you need to restart the bot each time you make a change to the code, so I implemented a way to execute commands and see their output through Discord's chat. This way, I can test my code without having to restart the bot each time.",
                "GAME COMMANDS",
                "reset: Resets all variables, roles, and clears arrays",
                "status: Prints the status of lobby (number of players currently in the lobby)",
                "addme: Adds a player to the lobby",
                "rolepls: Sends a DM to the player that includes his role",
                "gamestart: Starts timer for missions",
                "gamewon: Announces that game is done and starts voting phase",
                "DEBUG COMMANDS",
                "print <python variable>: prints (to discord chat) the current value of any variable within the environnement",
                "Example: - print players >>>> ['Sorry lm BIind','NotToxicBipolar','iSultan','Sondo45','Lost Astronaut']",
                "do for <int> <python command>: basically a 'for loop' where the loop variable is 'i' by default",
                "Example: do for 1 count = 0; do for 10 count+=1; print count >>>> 10",
                "Also note that anything that is printed, or processed by the 'do for' loop is automatically added to a list called 'buffer', hence comes the following commands",
                "clear buffer: clears the buffer (duh)",
                "buffer: prints the buffer",
                ["../img/25231.png", "github.com/belkhiritaha/DiscordBot"],
                "(Source code)"
            ]
        },
        {
            "title": "SDL2 Raycasting",
            "layout": [
                0,
                1,
                0,
                2,
                1,
                0,
                2,
                0,
                0,
                3,
                0
            ],
            "content": [
                "A 3D raycasting engine written in C using SDL2",
                "CONCEPT",
                "The game is a 3d shooter where the player can move around and shoot kawai anime characters (yes it's cringe)",
                "../img/raycastinggame.png",
                "RAYCASTING",
                "The goal is to simulate a 3D world when the world is actually stored in a 2D array",
                "../img/raycastingmap2D.png",
                "We can achieve that illusion by casting multiple rays in the players field of view. Given the distance that each ray travels before hitting a wall, we get an estimate of the distance between the player and the walls around.",
                "We draw the walls according to this distance we calculated, giving this sweet sweet DOOM-like 3D look",
                ["../img/25231.png", "github.com/belkhiritaha/raycasting"],
                "(Source code)"
            ]
        },
        {
            "title": "Projet Apprentissage Par Renforcement",
            "layout": [
                1,
                0,
                0,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                2,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0
            ],
            "content": [
                "PRÉSENTATION DU SUJET",
                "Le projet se décompose en deux phases, correspondant chacune approximativement à une semaine de travail. La première phase est commune à tous les groupes et met en place des outils permettant de manipuler des images et d'interagir avec l'utilisateur. Cette phase est ponctuée de petits exercices assez libres où vous devrez démontrer votre maîtrise des points abordés en individuel et se termine par la création d'un petit jeu d'arcade en groupe qui mettra de plus en œuvre un processus Markovien. La seconde phase, plus spécifique à chaque groupe, consiste à réinvestir les acquis de la première phase afin de créer un prototype de votre propre « jeu vidéo » respectant la thématique du projet.",
                "GROUPE",
                "Numéro 5 avec Taha BELKHIRI, Marc BERET et Antoine MEYER.",
                "LIENS",
                "Git : https://gitlab.isima.fr/maberet/ProjetZZ1 et Trello : https://trello.com/b/YGhNeYX3/projet-apprentissage-par-renforcement",
                "TRAVAUX DEMANDÉS",
                "X fenêtré : terminé. ✔️",
                "Pavé de serpents : terminé. ✔️",
                "Jeu de la vie : terminé. ✔️",
                "Animer des sprites : terminé. ✔️",
                "Chef d’œuvre : terminé. ✔️",
                "Jeu avec apprentissage par renforcement : terminé. ✔️",
                "Site Web : terminé. ✔️",
                "JEU DE LA VIE : TERMINÉ. ✔️",
                "Tous les membres du groupe ont fait la base du jeu de la vie (affichage de base, logique, etc) et nous avons ensuite prit le meilleur de chacun pour la version finale :",
                "➤ Taha a fait la grille torique, la détection des cycles et des états stables.",
                "➤ Marc a fait la sauvegarde dans un fichier.",
                "➤ Antoine a fait le chargement d'un fichier et le redimensionnement de la grille en cours de jeu (fonctionnalité non présente dans le jeu final car pleine écran).",
                "CHEF D’ŒUVRE : TERMINÉ. ✔️",
                "Objectifs du chef d’œuvre ",
                "Mettre en œuvre tout ce qui a été vu sur la SDL, en créant un mini jeu. Nous proposons un jeu totalement différent (validé par l'enseignant). Ce n'est qu'un exercice et il ne faudrait pas lui accorder plus d'une journée : nous avons passé 2 jours sur cet exercice. Notre jeu mets en œuvre une chaîne de Markov afin de gérer le comportement d'au moins un élément du jeu (le feu).",
                "But du jeu :",
                "Empêcher la propagation du feu en éteignant les flammes avec vos seaux d'eau.",
                "Chaîne de Markov :",
                "Notre chaîne de Markov se déploie sur le comportement du feu. Il y a 5 états pour un feu :",
                "➤ s'éteint",
                "➤ étincelle",
                "➤ petit feu",
                "➤ feu fort",
                "➤ se propage",
                "Un tableau de Markov pour l'évolution du feu peut être comme ceci :",
                "[wow image]",
                "Organisation de l'équipe :",
                "Nous avons travaillé avec Git et l'utilisation des branches. Nous avons rapidement séparé le travail comme suit :",
                "➤ Taha Belkhiri : toute la partie visuelle (carte, assets, menu, dessins, implémentations) et les animations.",
                "➤ Marc Beret : structure et mécanique du feu; chaîne de Markov; propagation du feu.",
                "➤ Antoine Meyer : logique du personnage (collisions); gestion du clic et de ses actions possibles.",
                "JEU AVEC APPRENTISSAGE PAR RENFORCEMENT : TERMINÉ ✔️",
                "[wow gif]",
                "🎾 Raison d'être du jeu",
                "Réinvestir les acquis de la première phase afin de créer un prototype de notre propre « jeu vidéo » respectant la thématique du projet : apprentissage par renforcement ou Q-learning, méthode « essai-erreur ».",
                "🎾 Principe du jeu",
                "Un match de tennis sans rebonds. Un joueur humain affronte une intelligence artificielle entrainée à renvoyer la balle.",
                "🎾 Visuel du jeu",
                "Le raycasting est une technique de rendu permettant de créer une perspective 3D dans une carte 2D. Nous avons décidé de faire tout le rendu visuel de notre jeu en 3D en utilisant cette technique. Cela rajoute un challenge mathématique, le raycasting fonctionnant avec beaucoup de trigonométrie.",
                "Organisation de l'équipe :",
                "➤ Taha Belkhiri : toute la partie visuelle (rendu 3D, carte, assets) et plug de l'IA.",
                "➤ Marc Beret : mathématique des trajectoires; création et entrainements de l'IA grâce à l'apprentissage par renforcement.",
                "➤ Antoine Meyer : logique des acteurs (collisions, déplacements); rendu 2D et ses courbes; page web.",
                "🎾 Idées non réalisées et pistes d'améliorations",
                "➤ menu",
                "➤ score",
                "➤ implémenter les rebonds"
            ]
        },
        {
            "title": "Projet aZZure",
            "layout": [
                0
            ],
            "content": [
                "Coming soon..."
            ]
        },
        {
            "title": "Instagram Bot",
            "layout": [
                0,
                1,
                0,1,0,1,0,1,0,2,3,0

            ],
            "content": [
                "A bot that promotes e-commerces accounts on Instagram",
                "CONCEPT",
                "Given a set of accounts, this bot will log in to each account and post comments that help promotes your e-commerce page on popular/related hashtags. The bot keeps track of the number of posts made and will stop after reaching the maximum number of posts. Also, it will not comment on previously commented posts. The bot also comes with a basic Tkinter GUI that allows you to change the hashtags, the number of posts to make, and the time between posts.",
                "SELENIUM",
                "The bot uses Selenium to log in to each account and post comments. Selenium is a web browser automation tool that allows you to automate web browser actions. It is a very powerful tool that can be used to automate almost any web browser action. It is also very easy to use and has a lot of documentation.",
                "ACCOUNT CREATION",
                "There's also a semi automated account creation feature that will make creating account easier (T.O.S friendly).",
                "GUI",
                "The bot comes with a basic Tkinter GUI that allows you to change the hashtags, the number of posts to make, and the time between posts.",
                "[image]",
                ["../img/25231.png", "github.com/belkhiritaha/InstagramBot"],
                "(Source code)"
            ]
        },
        {
            "title": "RedditTTS",
            "layout": [
                0,1,0,0,1,0,0,1,0,0,0,2,1,0,1,0,0,0,1,0,0,2,3,0
            ],
            "content": [
                "A bot that creates content for TikTok",
                "CONCEPT",
                "Reddit readings are a genre of content that blew up recently and is now very popular on TikTok (and similar platforms). This type of content is particularly very easy to automate and gets a lot of attention.",
                "First of all, we need to query Reddit for the latest/hottest posts. We then generate images of the posts and glue them together with some text-to-speech.",
                "PRAW",
                "praw is a Python library that allows us to interact with Reddit. It is a Python wrapper for the Reddit API.",
                "We use it to query Reddit for the latest/hottest posts and collect all that data for later use.",
                "TEMPLATES",
                "Once we get all the data from the post we want to turn into a video, we need to put that data into a template that looks like the Reddit Interface.",
                "The templates are made with HTML/CSS and are based on the Dark-Mode of the Reddit Website.",
                "The template for the posts looks like this",
                "[image]",
                "GTTS",
                "GTTS is a Python library that allows us to generate text-to-speech. It is a very powerful library that allows us to generate high quality audio files.",
                "It is based on the Google Text-to-Speech API. (used to be Google Translate Text-to-Speech)",
                "We use it to generate the audio files for the text-to-speech.",
                "MOVIEPY",
                "MoviePy is a Python library that allows us to manipulate videos. It is a very powerful library that allows us to do a lot of things with videos.",
                "Once we assemble everything together, we need to put it into a video. We use MoviePy to do that.",
                "[image]",
                ["../img/25231.png", "github.com/belkhiritaha/RedditTTS"],
                "(Source code)"
            ]
        },
        {
            "title": "Kamagoshark / WireShark",
            "layout": [
                0,1,0,0,1,0,0,1,0,3,0
            ],
            "content": [
                "This is a 3D game written in 100% JavaScript during a GameJam",
                "CONCEPT",
                "The theme being: abyZZ, we decided to make a game where you play as a shark that eats other fish and explores the abyss.",
                "The game is written in 100% JavaScript and uses the Three.js library to render the 3D graphics.",

                "GAMEPLAY",
                "The game is a 3D endless runner where you play as a shark that eats other fish and explores the abyss.",
                "The game is played with the arrow keys. The left and right arrows control the shark's rotation and the up arrow controls the shark's speed.",
                
                "LINK TO PLAY",
                "game is available here perso.isima.fr/~tabelkhiri/kamagoshark",

                ["../img/25231.png", "github.com/belkhiritaha/Wireshark-the-game-"],
                "(Source code)"
            ]
        }
    ]
}